<?php namespace ProcessWire;

use PaymentQuery, Payment;

include_once(__DIR__.'/PaymentsApiRequest.php');

/**
 * Payments
 * Wrapper Class for processing transaction requests through a gateway class
 * 
 * @property  bool     $debug        For Debug?
 * @property  Payment  $response     Class Holding Response from Gateway
 * @property  Module   $gateway      Class for sending API requests to configured gateway
 */
class Payments extends WireData implements Module {
	const LOG_DEBUG = 'payments-debug';

	private $debug = false;

	public function __construct() {
		$this->response = Payment::create_response();
		$this->gateway = null;
	}

	/**
	 * Return if Debug Mode is on
	 * @return bool
	 */
	public function is_debug() {
		return $this->debug;
	}

	/**
	 * Set Debug Value
	 * @param  bool $debug
	 * @return void
	 */
	public function set_debug(bool $debug = false) {
		$this->debug = $debug;
	}

/* =============================================================
	Processing Functions
============================================================= */
	/**
	 * Call Gateway to send Transaction Request
	 * @param  string $ordn Order Number
	 * @return void
	 */
	public function process($ordn) {
		if ($this->request_exists($ordn)) {
			$this->delete_response($ordn);
			$credentials = $this->get_credentials();
			$request = $this->get_request($ordn);
			$request->set_salt($this->get_salt($request, $credentials));
			$this->gateway = $this->get_gateway();
			$this->gateway->set_credentials($credentials);
			$this->gateway->process($request);
			$this->process_response($request);
		} else {
			if (empty($ordn)) {
				$this->delete_response('-');
				$this->create_error_response("-", "Order Number not Provided");
			} else {
				$this->delete_response($ordn);
				$this->create_error_response("$ordn", "Order $ordn Request does not exist");
			}
		}
	}

	/**
	 * Undocumented function
	 * @return void
	 */
	public function process_response(Payment $request) {
		$this->response = $this->gateway->response;
		if ($this->response->is_approved()) {
			$this->response->setAvsmsg('');
		}
		$this->response->setAmount($request->amount);
		$this->response->save();

		if ($this->debug) {
			$this->log_debug($request);
			$this->response->setCardnbr($request->cardnumber());
			$this->response->setExpdate($request->expiredate());
			$this->response->setCvv($request->cvv());
		}
	}

	/**
	 * Log Transaction Request and Response for Debug
	 * @param  Payment $request Payment Request
	 * @return void
	 */
	private function log_debug(Payment $request) {
		$log = $this->wire('log');
		$json = array(
			'gateway' => $this->config->payments->gateway,
			'ordn' => $request->ordn,
			'request' => array(
				'amount' => $request->amount,
				'type'   => $request->type,
				'transactionid' => $request->transactionid
			),
			'response' => array(
				'amount' => $this->response->amount,
				'type'   => $this->response->type,
				'transactionid' => $this->response->transactionid,
				'authcode' => $this->response->authcode,
				'result' => $this->response->result,
				'errorcode' => $this->response->errorcode,
				'avs' => $this->response->avsmsg,
			)
		);
		$log->save(self::LOG_DEBUG, "Transaction: " . json_encode($json));
	}

	/**
	 * Return Gateway Module to make Transaction Request
	 * @return object
	 */
	public function get_gateway() {
		$name = ucfirst($this->config->payments->gateway);
		return $this->wire('modules')->get("Payments$name");
	}

	/**
	 * Return Salt Value for request
	 * @param  Payment $request
	 * @param  array   $credentials
	 * @return string
	 */
	public function get_salt(Payment $request, array $credentials) {
		$col = $credentials['saltcolumn'];
		return $request->$col;
	}

	/**
	 * Return Credentials for Gateway
	 * @return array
	 */
	public function get_credentials() {
		$file = __DIR__."/credentials.json";

		if (file_exists($file)) {
			$json = json_decode(file_get_contents($file), true);
			return $json["0"];
		}
	}


/* =============================================================
	DB Payment Functions
============================================================= */
	/**
	 * Return Payment Request
	 * @param  string $ordn Order Number
	 * @return Payment
	 */
	public function get_request($ordn) {
		$q = $this->query_payment($ordn, Payment::RECORDTYPE_REQUEST);
		return $q->findOne();
	}

	/**
	 * Return if Request Exists
	 * @param  string $ordn Order Number
	 * @return bool
	 */
	public function request_exists($ordn) {
		$q = $this->query_payment($ordn, Payment::RECORDTYPE_REQUEST);
		return boolval($q->count());
	}

	/**
	 * Return if Response Exists
	 * @param  string $ordn Order Number
	 * @return bool
	 */
	public function response_exists($ordn) {
		$q = $this->query_payment($ordn, Payment::RECORDTYPE_RESPONSE);
		return boolval($q->count());
	}

	/**
	 * Delete Existing Response
	 * @param  string $ordn Order Number
	 * @return bool
	 */
	public function delete_response($ordn) {
		$q = $this->query_payment($ordn, Payment::RECORDTYPE_RESPONSE);
		if ($q->count()) {
			$q->delete();
		}
	}

	/**
	 * Return PaymentQuery
	 * @param  string $ordn Order Number
	 * @param  string $type Record Type
	 * @return PaymentQuery
	 */
	public function query_payment($ordn = '', $type = '') {
		$q = PaymentQuery::create();
		$q->filterByOrdn($ordn);
		if ($type) {
			$q->filterByRectype($type);
		}
		return $q;
	}

/* =============================================================
	Response Functions
============================================================= */
	/**
	 * Return Response
	 * @return Payment|null
	 */
	public function get_response() {
		return $this->response;
	}

	/**
	 * Set Error Response
	 * @return void
	 */
	private function create_error_response($ordn = '', $msg = '') {
		$this->response = Payment::create_response();
		$this->response->setOrdn($ordn);
		$this->response->decline();
		$this->response->setErrormsg($msg);
		$this->response->set_datetime();
		$this->response->save();
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Payments',
			'version' => 101,
			'summary' => 'Wrapper Class for calling Payments',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {
		$this->config->payments = $this->wire('modules')->get('PaymentsConfig');
	}
}
