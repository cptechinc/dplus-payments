<?php namespace ProcessWire;

use Payment;

use net\authorize\api\contract\v1 as AnetAPI;
use net\authorize\api\controller as AnetController;
use net\authorize\api\constants\ANetEnvironment;

include_once(__DIR__.'/PaymentsCredentials.php');
include_once(__DIR__.'/PaymentsApiRequest.php');

/**
 * PaymentsAuthorizenet
 * 
 * Class for sending Payment Requests to Authorize.Net API
 * 
 * @property  PaymentsCredentials $credentials  API Credentials
 * @property  Payment             $response     Payment Response
 */
class PaymentsAuthorizenet extends WireData implements Module {
	const TRANSACTION_CAPTURE               = 'authCaptureTransaction';
	const TRANSACTION_REFUND                = 'refundTransaction';
	const TRANSACTION_CAPTURE_PREAUTHORIZED = 'priorAuthCaptureTransaction';
	const TRANSACTION_PREAUTHORIZE          = 'authOnlyTransaction';
	const TRANSACTION_VOID                  = 'voidTransaction';

	const MARKET_TYPE_RETAIL = '2';
	const MARKET_TYPE_ECOMM = '0';

	const DEVICE_TYPE_PC = '5';

	public function __construct() {
		parent::__construct();
		$this->credentials = new PaymentsCredentials();
		$this->response = Payment::create_response();
	}

/* =============================================================
	Interface Functions
============================================================= */
	/**
	 * Processes Request, sends Transaction Request to API
	 * @param Payment $request
	 * @return void
	 */
	public function process(Payment $request) {
		switch ($request->type) {
			case 'DEBIT':
				$this->capture($request);
				break;
			case 'CREDIT':
				$this->refund($request);
				break;
			case 'PREAUTH':
				$this->preauthorize($request);
				break;
			case 'CPREAUTH':
				$this->capture_preauthorized($request);
				break;
			case 'VOID':
				$this->void($request);
				break;
		}
	}

	/**
	 * Request Capture Payment
	 * @param  Payment $request
	 * @return void
	 */
	public function capture(Payment $request) {
		$tran = $this->createTransactionRequest($request, self::TRANSACTION_CAPTURE);
		$this->request($tran, $request);
	}

	/**
	 * Request Refund Payment
	 * @param  Payment $request
	 * @return void
	 */
	public function refund(Payment $request) {
		$tran = $this->createTransactionRequest($request, self::TRANSACTION_REFUND);
		$this->request($tran, $request);
	}

	/**
	 * Request Capture Pre-Authorized Payment
	 * @param  Payment $request
	 * @return void
	 */
	public function capture_preauthorized(Payment $request) {
		$tran = $this->createTransactionRequest($request, self::TRANSACTION_CAPTURE_PREAUTHORIZED);
		$this->request($tran, $request);
	}

	/**
	 * Request Capture Payment
	 * @param  Payment $request
	 * @return void
	 */
	public function preauthorize(Payment $request) {
		$tran = $this->createTransactionRequest($request, self::TRANSACTION_PREAUTHORIZE);
		$this->request($tran, $request);
	}

	/**
	 * Request Void Payment
	 * @param  Payment $request
	 * @return void
	 */
	public function void(Payment $request) {
		$tran = $this->createTransactionRequest($request, self::TRANSACTION_VOID);
		$this->request($tran, $request);
	}

/* =============================================================
	Request Functions
============================================================= */
	/**
	 * Return API Transaction Request
	 * @param  Payment $request
	 * @param  string  $type                      API Transaction Type e.g 
	 * @return AnetAPI\CreateTransactionRequest
	 */
	private function createTransactionRequest(Payment $request, $type) {
		$t = new AnetAPI\CreateTransactionRequest();
		$t->setMerchantAuthentication($this->typeMerchantAuthentication());
		$t->setRefId('ref' . time());
		$t->setTransactionRequest($this->typeTransactionRequest($request, $type));
		return $t;
	}

	/**
	 * Send Transaction Request to AuthorizeNet
	 * @param  AnetAPI\CreateTransactionRequest $tran
	 * @param  Payment $request
	 * @return void
	 */
	private function request(AnetAPI\CreateTransactionRequest $tran, Payment $request) {
		$controller = new AnetController\CreateTransactionController($tran);
		$response = $controller->executeWithApiResponse($this->get_endpoint_url($this->credentials->sandbox));
		$this->process_response($request, $response);
	}

/* =============================================================
	Response Processing Functions
============================================================= */
	/**
	 * Interpret Response from AuthorizeNet
	 * @param  Payment                                 $payment
	 * @param  AnetAPI\CreateTransactionResponse|null  $response
	 * @return void
	 */
	public function process_response(Payment $payment, $response) {
		$this->response = Payment::create_response();
		$this->response->setOrdernbr($payment->ordn);
		$this->response->setType($payment->type);
		
		if ($response != null) {
			// Check to see if the API request was successfully received and acted upon
			if ($response->getMessages()->getResultCode() == "Ok") {
				// Since the API request was successful, look for a transaction response
				// and parse it to display the results of authorizing the card
				$tresponse = $response->getTransactionResponse();
			
				if ($tresponse != null && $tresponse->getMessages() != null) {
					$this->response->approve();
					$this->response->setTransactionid($tresponse->getTransId());
					$this->response->setAuthcode($tresponse->getAuthCode());
					$this->response->setAvs($tresponse->getAvsResultCode());
				} else {
					$this->process_error_response($response);
				}
				// Or, print errors if the API request wasn't successful
			} else {
				$this->process_error_response($response);
			}
		} else {
			$this->response->decline();
			$this->response->setErrormsg('No Response');
		}
		$this->response->set_datetime();
		$this->response->save();
	}

	/**
	 * Interpret Error from Response
	 * @param  AnetAPI\CreateTransactionResponse $response
	 * @return void
	 */
	public function process_error_response(AnetAPI\CreateTransactionResponse $response) {
		$this->response->decline();
		$tresponse = $response->getTransactionResponse();

		if ($tresponse != null && $tresponse->getErrors() != null) {
			$this->response->setErrorcode($tresponse->getErrors()[0]->getErrorCode());
			$this->response->setErrormsg($tresponse->getErrors()[0]->getErrorText());
		} else {
			$this->response->setErrorcode($response->getMessages()->getMessage()[0]->getCode());
			$this->response->setErrormsg($response->getMessages()->getMessage()[0]->getText());
		}
	}

/* =============================================================
	AuthorizeNet Data Functions
============================================================= */
	/**
	 * Return API URL Depending on Environment needed
	 * @param  bool $sandbox
	 * @return string
	 */
	private function get_endpoint_url(bool $sandbox) {
		return $sandbox ? ANetEnvironment::SANDBOX : ANetEnvironment::PRODUCTION;
	}

	/**
	 * Return API Transaction Request
	 * @param  Payment $request
	 * @param  string  $type       API Transaction Type e.g 
	 * @return AnetAPI\TransactionRequestType
	 */
	private function typeTransactionRequest(Payment $request, $type) {
		$transaction = new AnetAPI\TransactionRequestType();
		$transaction->setTransactionType($type);
		$transaction->setRetail($this->typeTransRetailInfo($request));

		if ($type != 'voidTransaction') {
			$transaction->setAmount($request->amount);
			$transaction->setOrder($this->typeOrder($request));
			$transaction->setPayment($this->typePayment($request));
			$transaction->setBillTo($this->typeCustomerAddress($request));
			$transaction->setCustomer($this->typeCustomerData($request));
		}
		
		$transaction->addToTransactionSettings($this->typeTransactionSettingsWindow());
		if ($request->transactionid) {
			$transaction->setRefTransId($request->transactionid);
		}
		return $transaction;
	}

	/**
	 * Return API PaymentType
	 * @param  Payment $request
	 * @return AnetAPI\PaymentType
	 */
	private function typePayment(Payment $request) {
		$payment = new AnetAPI\PaymentType();

		if ($request->is_card_present()) {
			$payment->setTrackData($this->typeCreditCardTrack($request));
		} else {
			$payment->setCreditCard($this->typeCreditCard($request));
		}
		return $payment;
	}

	/**
	 * Return CreditCardType
	 * @param  Payment         $request
	 * @return AnetAPI\CreditCardType
	 */
	private function typeCreditCard(Payment $request) {
		$card = new AnetAPI\CreditCardType();
		$card->setCardNumber($request->cardnumber());
		$card->setExpirationDate($this->convert_date($request->expiredate()));
		$card->setCardCode($request->cvv());
		return $card;
	}
	
	/**
	 * Return API CreditCardTTrackype
	 * @param  Payment              $request
	 * @return AnetAPI\CreditCardTrackType
	 */
	private function typeCreditCardTrack(Payment $request) {
		$card = new AnetAPI\CreditCardTrackType();
		$card->setTrack2($request->trackii);
		return $card;
	}

	/**
	 * Return API TransRetailInfoType
	 * NOTE: It depends if Track2 data is supplied
	 * @param  Payment $request
	 * @return AnetAPI\TransRetailInfoType
	 */
	public function typeTransRetailInfo(Payment $request) {
		$retail = new AnetAPI\TransRetailInfoType();

		if ($request->is_card_present()) {
			$retail->setMarketType(self::MARKET_TYPE_RETAIL); //RETAIL CP
			$retail->setDeviceType(self::DEVICE_TYPE_PC); //PC REGISTER
		} else {
			$retail->setMarketType(self::MARKET_TYPE_ECOMM);
		}
		return $retail;
	}

	/**
	 * Return API OrderType
	 * @param Payment $request
	 * @return AnetAPI\OrderType
	 */
	private function typeOrder(Payment $request) {
		$order = new AnetAPI\OrderType();
		$order->setInvoiceNumber($request->ordn);
		return $order;
	}

	/**
	 * Return API SettingType
	 * @return AnetAPI\SettingType
	 */
	private function typeTransactionSettingsWindow() {
		$settings = new AnetAPI\SettingType();
		$settings->setSettingName("duplicateWindow");
		$settings->setSettingValue("60");
		return $settings;
	}

	/**
	 * Return API Customer Data Object
	 * @param  Payment $request
	 * @return AnetAPI\CustomerDataType
	 */
	private function typeCustomerData(Payment $request) {
		$customer = new AnetAPI\CustomerDataType();
		$customer->setType("individual");
		$customer->setId($request->custid);
		$customer->setEmail("EllenJohnson@example.com");
		return $customer;
	}

	/**
	 * Return API Customer Address Object
	 * @param  Payment $request
	 * @return AnetAPI\CustomerAddressType
	 */
	private function typeCustomerAddress(Payment $request) {
		// Set the customer's Bill To address
		$name = explode(' ', $request->card_name);
		$address = new AnetAPI\CustomerAddressType();
		$address->setFirstName($name[0]);
		$address->setLastName($name[1]);
		$address->setCompany($request->custid);
		$address->setAddress($request->street);
		//$address->setCity("Pecan Springs");
		//$address->setState("TX");
		$address->setZip($request->zipcode);
		$address->setCountry("USA");
		return $address;
	}

	/**
	 * Return API Authentication Object
	 * @return AnetAPI\MerchantAuthenticationType
	 */
	private function typeMerchantAuthentication() {
		$auth = new AnetAPI\MerchantAuthenticationType();
		$auth->setName($this->credentials->login);
		$auth->setTransactionKey($this->credentials->key);
		return $auth;
	}

	/**
	 * Return Date converted into AuthorizeNet format (YYYY-MM)
	 * @param  string $date
	 * @return string
	 */
	private function convert_date($date) {
		if (strpos($date, '/') !== FALSE) {
			$datearray = explode('/', $date);
			$month = $datearray[0];
			$year = $datearray[1];
		} elseif(strlen($date) == 4) {
			$month = substr($date, 0, 2);
			$year = "20". substr($date, 2, 2);
		}
		return "$year-$month";
	}

/* =============================================================
	Response Processing Functions
============================================================= */
	public function set_credentials(array $credentials) {
		$this->credentials->login   = $credentials['login'];
		$this->credentials->key     = $credentials['key'];
		$this->credentials->sandbox = $credentials['sandbox'];
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Payments Authorizenet',
			'version' => 101,
			'summary' => 'Sends Payment Requests to Authorizenet',
			'singular' => true,
			'autoload' => true,
		);
	}
}
